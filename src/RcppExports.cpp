// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// cpp_sexp_mat_to_vcl_sp_mat
SEXP cpp_sexp_mat_to_vcl_sp_mat(SEXP ptrA, int type_flag, int ctx_id);
RcppExport SEXP _gpuRsparse_cpp_sexp_mat_to_vcl_sp_mat(SEXP ptrASEXP, SEXP type_flagSEXP, SEXP ctx_idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< int >::type type_flag(type_flagSEXP);
    Rcpp::traits::input_parameter< int >::type ctx_id(ctx_idSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_sexp_mat_to_vcl_sp_mat(ptrA, type_flag, ctx_id));
    return rcpp_result_gen;
END_RCPP
}
// sp_vcl_to_sexp
SEXP sp_vcl_to_sexp(SEXP ptrA, int type_flag, int ctx_id);
RcppExport SEXP _gpuRsparse_sp_vcl_to_sexp(SEXP ptrASEXP, SEXP type_flagSEXP, SEXP ctx_idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< int >::type type_flag(type_flagSEXP);
    Rcpp::traits::input_parameter< int >::type ctx_id(ctx_idSEXP);
    rcpp_result_gen = Rcpp::wrap(sp_vcl_to_sexp(ptrA, type_flag, ctx_id));
    return rcpp_result_gen;
END_RCPP
}
// run_tutorial
void run_tutorial();
RcppExport SEXP _gpuRsparse_run_tutorial() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    run_tutorial();
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_gpuRsparse_cpp_sexp_mat_to_vcl_sp_mat", (DL_FUNC) &_gpuRsparse_cpp_sexp_mat_to_vcl_sp_mat, 3},
    {"_gpuRsparse_sp_vcl_to_sexp", (DL_FUNC) &_gpuRsparse_sp_vcl_to_sexp, 3},
    {"_gpuRsparse_run_tutorial", (DL_FUNC) &_gpuRsparse_run_tutorial, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_gpuRsparse(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
